#! /usr/bin/env python

## system imports
import re
import os
import sys
import getopt

## timer
from datetime import time
from datetime import date
from datetime import datetime
from TopAnalysis.TopUtils.tools.Timer import Timer

##-----------------------------------------------------------------------------------
## script job submission to batch farm systems, Version 00-01-01
## twiki: https://twiki.cern.ch/twiki/bin/view/CMS/TopUtils#Batch_job_submission
class jobSplitter:
   ##
   ## configurables
   ##

   ## verbose mode
   __verbose        = False
   ## job command
   __command        = ''
   ## events token
   __eventToken     = '-e'
   ## skip evt token
   __skipsToken     = '-s'
   ## job name token
   __outputToken    = '-o'
   ## subset token
   __subsetToken    = '-z'   
   ## submit token
   __submitToken    = '-d'
   ## farm token
   __farmToken      = '-f'   
   ## submit name
   __submitName     = ''
   ## farm queue
   __farmQueue      = 'medium'
   ## number of jobs
   __numberOfJobs   = 0

   ##
   ## internal variables
   ##

   ## event offset
   __offset  = 0 
   ## version
   __version = 'V00-01-02'
   ## name of the object 
   __name    = 'none'
   
##-----------------------------------------------------------------------------------    
##  Constructor
   def __init__(self):
      self.name = 'splitter'
      
##-----------------------------------------------------------------------------------        
##  * start sequence
   def beginJob(self):
      versionLine = "*                                      "
      versionLine+= self.__version + " *"              
      print "**************************************************"
      print "* starting JobSplitter...                        *"
      print "*                                                *"
      print versionLine
      print "**************************************************"
      
##-----------------------------------------------------------------------------------        
##  * end sequence
##  * this may contain the execution of histPlotter or something similar                
   def endJob(self):
      print "**************************************************"
      print "* leaving JobSplitter...                         *"
      print "*                                                *"
      print "*                                      Good Bye! *"
      print "**************************************************"          

##-----------------------------------------------------------------------------------
##  * Parse command line options
##  * Do basic check whether the options make sense or not
##  * Depending on the options execute 'doAll' or 'doJob'
   def main(self):       
      try:
         opts, args = getopt.getopt(sys.argv[1:],
                                    'hvq:c:s:e:o:z:d:f:n:x:',
                                    ['help','verbose','queue=','cmd=','skip=','evts=','out=','sub=','dir=','farm=','njob=','name=']
                                    )
      except getopt.error, msg:
         print msg
         print "for help use --help"
         sys.exit(2)
         
      for o, a in opts:
         ################################################
         ## get help
         ################################################
         if o in ("-h", "--help"):
            self.__helpMsg()
            self.endJob()
            sys.exit(0)
         ################################################
         ## run verbose mode
         ################################################                         
         elif o in ("-v", "--verbose"):
            self.__verbose = True
         ################################################
         ## execution command
         ################################################            
         elif o in ("-c", "--cmd"):
            if (not (a == '')):
               self.__command = a
         ################################################
         ## token for maximal number of events to be
         ## processed from 'cmd'
         ################################################                                
         elif o in ("-e", "--evts"):
            if (not (a == '')):               
               self.__eventToken = a
         ################################################
         ## token for skip events to be
         ## processed from 'cmd'
         ################################################                                
         elif o in ("-s", "--skip"):
            if (not (a == '')):               
               self.__skipsToken = a               
         ################################################
         ## token for output name for 'cmd'
         ################################################               
         elif o in ("-o", "--out"):
            if (not (a == '')):               
               self.__outputToken = a
         ################################################
         ## token for subset name for 'cmd'
         ################################################               
         elif o in ("-z", "--sub"):
            if (not (a == '')):               
               self.__subsetToken = a
         ################################################
         ## token for job name for 'cmd'
         ################################################               
         elif o in ("-d", "--dir"):
            if (not (a == '')):               
               self.__submitToken = a
         ################################################
         ## token for farm internal communication
         ################################################               
         elif o in ("-f", "--farm"):
            if (not (a == '')):               
               self.__farmToken = a               
         ################################################
         ## jon name
         ################################################               
         elif o in ("-x", "--name"):
            if (not (a == '')):               
               self.__submitName = a               
         ################################################
         ## maximal number of jobs to split
         ################################################               
         elif o in ("-n", "--njob"):
            self.__numberOfJobs = int(a)                  
         ################################################
         ## farm queue
         ################################################            
         elif o in ("-q", "--queue"):
            if (not (a == '')):
               self.__farmQueue = a.lower()
         else:
            self.__errorMsg()
            print '*   argument(s) not recognized. See --help for usage'
            print "**************************************************"
      ## perform basic checks of the input
      self.__checkOptions()
      ## check if an offset for skip evts
      ## was given; fill __offset if yes
      self.__checkForOffset()
      ## do the job splitting
      self.__split()

##-----------------------------------------------------------------------------------
##  * print help message for the use of the jobSplitter
   def __helpMsg(self):
      print "\n"
      print " Synopsis   : submit [Option] --cmd '...' -n NJOBS --name JOBNAME         \n"
      print " Description: script to submit jobs to the NAF farm system. Expected use    "
      print "              is with cmsRun, but it can take any executing script; the     "
      print "              execution should be specified as a full cmd line including    "
      print "              all options in the --cmd option; submission expects tokens    "
      print "              for -e, -s, -o, -d to be present in the command line; token   "
      print "              -s is added with 0 events to be skipped when not found; token "
      print "              -d is added with a default job name when not found, which is  "
      print "              created from date and time. Defaults for the expected tokens  "
      print "              are given but may be specified when different; option -queue  "
      print "              allows to specify different queue slots from xshort (<15min), "
      print "              short (<1h), medium (<12h) and long (<48h); memory assertion  "
      print "              is set to 2G.                                               \n"
      print " Options    : -h | --help           [ ]   print this message                "
      print "              -v | --verbose        [ ]   run in verbose mode               "
      print "              -c | --cmd    ....    [x]   specify full command line         "
      print "              -s | --skip   '-s'    [ ]   specify token skip                "
      print "              -e | --evts   '-e'    [!]   specify token for the no of evts  "        
      print "              -o | --out    '-o'    [!]   specify token for output file     "
      print "              -z | --sub    '-z'    [ ]   specify token for subset file     "
      print "              -d | --dir    '-d'    [ ]   specify token for the job dir     "
      print "              -f | --farm   '-f'    [ ]   specify token for farm internals  "
      print "              -n | --njob   ....    [x]   nuber of jobs to be created       "
      print "              -x | --name   ....    [ ]   submission job directory          "
      print "              -q | --queue  ....    [ ]   specify queue (default: medium) \n"     
      print "              * predefined queues                                           "
      print "              *    - xshort ( <15min )                                      "
      print "              *    - short  ( < 1h   )                                      "
      print "              *    - medium ( <12h   )                                      "
      print "              *    - long   ( <48h   )                                      "
      print " [ ] optional                                                               "
      print " [x] mandatory                                                              "
      print " [!] need to be present in the execution command line [--cmd '...']         "        
      print "\n"
         
##-----------------------------------------------------------------------------------
##  * print head for simple error message            
   def __errorMsg(self):
      print "**************************************************"
      print "* Error  :"

##-----------------------------------------------------------------------------------
##  * print head for simple warning message            
   def __warningMsg(self):
      print "**************************************************"
      print "* Warning:"      

##-----------------------------------------------------------------------------------
##  * print message on screen
##  * used in __waitForFirst        
   def __printMsg(self, msg):
      print msg

##-----------------------------------------------------------------------------------
##  * basic check of input configuration
   def __checkOptions(self):
      ################################################
      ## execution command specified?
      ################################################            
      if (self.__command == ''):
         self.__errorMsg()
         print '*   no execution command specified; choose --cmd to specify'
         print "**************************************************"            
         sys.exit(0)
      ################################################
      ## no of jobs specified?
      ################################################            
      if (self.__numberOfJobs == 0):
         self.__errorMsg()
         print '*   no of jobs not specified; choose -n to specify'
         print "**************************************************"            
         sys.exit(0)
      ################################################
      ## correct choice of farm queue?
      ################################################            
      if (not (self.__farmQueue in ["xshort", 'short', 'medium' , 'long'])
          ):
         self.__errorMsg()
         print '*   unknown queue; choose between:                '
         print '*     - xshort ( <15min )                         '
         print '*     - short  ( < 1h   )                         '
         print '*     - medium ( <12h   )                         '
         print '*     - long   ( <48h   )                         '            
         print "**************************************************"            
         sys.exit(0)                     
      ################################################
      ## job name specified?
      ################################################            
      if (self.__submitName == ''):
         self.__submitName = 'job_'
         self.__submitName+= datetime.today().strftime("%Y%m%d-%H%M%S")
         if (self.__verbose):
            self.__warningMsg()
            msg = '*   no job name specified for job. Job \n'
            msg+= '*   name was set to ' + self.__submitName 
            self.__printMsg(msg)
            print "**************************************************"

##-----------------------------------------------------------------------------------
##  * check if an offset is given for events to be skipped
##  * if yes take the value and buffer it in __offset
##  * __offset will always be added to the events to be skipped
##  * per default __offset is 0
   def __checkForOffset(self):
      value = self.__fromToken(self.__skipsToken, False)
      if(not value == ''):
         ## there is a non-zero skips token already in the events
         self.__offset = int(self.__fromToken(self.__skipsToken, False))

##-----------------------------------------------------------------------------------
##  * take command token and value
##  * replace object by value in token
##  * return modified command      
   def __toToken(self, command, token, value):
      ## prepare regex   
      object = r'\s+?('+token+')\s*?(\w+)\s*?'
      ## compile regex's
      flag = re.compile(object)

      if (not flag.search(command)):
         ## perform basic error treatment
         if (self.__verbose):
            self.__warningMsg()
            msg = '*   toToken :: token not found in command line: ' + token
            print msg
            ## take over and add the expected token plus value by hand
            print '*   toToken :: adding token and value'
            print "**************************************************"
         command    += ' ' + token + ' ' + value.__str__()
      else:
         replacement = ' ' + token + ' ' + value.__str__()
         command = flag.sub(replacement, command)         
      return command
   
##-----------------------------------------------------------------------------------
##  * get object from token
   def __fromToken(self, token, mandatory=True):
      ## return value
      value=''
      ## prepare regex
      object = r'\s+?('+token+')\s*?(\w+)\s*?'
      ## compile regex's
      flag = re.compile(object)

      if (not flag.search(self.__command)):
         ## perform basic error treatment
         if (mandatory):
            self.__errorMsg()
            msg = '*   fromToken :: token not found in command line: ' + token
            print msg
            print "**************************************************"
            sys.exit(0)
      else:
         value = flag.search(self.__command).group(2)         
         ## check sanity
         if(re.match(r'\d+', value) and re.search(r'\D+', value)):
            self.__errorMsg()
            msg = '*   value extracted from token: ' + token
            msg+= ' does not contain \n'
            msg+= '*   only digits as expected: '
            msg+= value
            print msg
            print "**************************************************"
            sys.exit(0)
      return value

##-----------------------------------------------------------------------------------
##  * determine job length from maximal number of events and number of jobs
##  * each job but the last will have the same length which will be
##    int(maxEvents/nJobs)
##  * the last job will hold the spill over   
   def __jobLength(self):
      maxEvents = int(self.__fromToken(self.__eventToken))
      jobLength = (maxEvents - maxEvents%self.__numberOfJobs)/self.__numberOfJobs
      if (maxEvents%self.__numberOfJobs > 0):
         jobLength+= 1
      return jobLength
    
##-----------------------------------------------------------------------------------
##  * get number of events for job to start with
##  * starts with event '0'
##  * events are filled in equal buckets up to the last job which takes what is left
##    over   
   def __firstEvent(self, job):
      maxEvents = int(self.__fromToken(self.__eventToken))
      if (maxEvents%self.__numberOfJobs > 0):
         firstEvent=job * (self.__jobLength()-1)
      else:
         firstEvent=job *  self.__jobLength()         
      return firstEvent

##-----------------------------------------------------------------------------------
##  * get number of events for job to stop at
##  * stops with event '__jobLength()-1' unless it is the last job which end with
##    the maximal number of events   
   def __lastEvent(self, job):
      ## correct in case of the last job
      lastEvent = int(self.__fromToken(self.__eventToken))
      if (not (job == (self.__numberOfJobs-1))):
         if (lastEvent%self.__numberOfJobs > 0):
            lastEvent=(job+1) * (self.__jobLength()-1)
         else:
            lastEvent=(job+1) *  self.__jobLength()    - 1
      return lastEvent

##-----------------------------------------------------------------------------------
##  * replace job name/event number/events to skip in 'command' 
##  * return final string
   def __subjob(self, job):
      subjob = self.__command
      ## replace subset name
      newSubset = self.__fromToken(self.__subsetToken, False) 
      if ( not newSubset == ''):
         ## in case the subset token is present in the
         ## cmd line; and don't do anything otherwise
         newSubset+= '_' + job.__str__()
         subjob = self.__toToken(subjob, self.__subsetToken, newSubset)
      ## replace output name
      newOutput = self.__fromToken(self.__outputToken)
      if (newOutput.lower() == 'none'):
         ## in case of 'none' don't add the job label
         subjob = self.__toToken(subjob, self.__outputToken, newOutput)
      else:
         ## add job label to the job output name
         newOutput+= '_' + job.__str__()
         subjob = self.__toToken(subjob, self.__outputToken, newOutput)
      ## replace skip (add an offset if required)
      newSkip   = (self.__firstEvent(job) + self.__offset).__str__()
      subjob    = self.__toToken(subjob, self.__skipsToken, newSkip)
      ## replace events
      newEvnt   = self.__lastEvent(job)-self.__firstEvent(job)
      subjob    = self.__toToken(subjob, self.__eventToken, newEvnt)
      ## replace jobname
      newJob    = self.__submitName
      subjob    = self.__toToken(subjob, self.__submitToken, newJob)
      ## add name of cfg for farmjob at the end of the command line
      newCfg    = ' ' + self.__farmToken + ' '
      if (newOutput.lower() == 'none'):
         ## in case of 'none' give a special definition of the job
         ## output name which is used for internal file administration
         newCfg+= 'tmp_' + self.__submitName + '_' + job.__str__()
      else:
         ## add job output name for internal file administration
         newCfg+= newOutput         
      subjob   += newCfg
      return subjob

##-----------------------------------------------------------------------------------
##  * split up jobs to be executed
   def __split(self):
      ## catch pathological cases
      if (self.__numberOfJobs<=0):
         self.__errorMsg()
         print "*   numberOfJobs <=0; this should never happen!!!"
         print "**************************************************"
         sys.exit(0)
          
      for job in range(self.__numberOfJobs):
         msg = "...submitting job " + job.__str__() + ' to folder '
         msg+= self.__submitName
         msg+= " first event = " + (self.__firstEvent(job)+1).__str__()
         msg+= " last event = " + self.__lastEvent(job).__str__()
         print msg

         # create subjob string
         subjobstr = self.__subjob(job)
         print subjobstr
         
         ## create job directory if it doesn't
         ## exist yet
         if (not os.path.exists(self.__submitName)):
            os.system('mkdir ' + self.__submitName)
         ## prepare submission script
         submissionScript = self.__submitName
         submissionScript+= '/'
         submissionScript+= self.__submitName
         submissionLog    = submissionScript
         submissionScript+='_'+job.__str__()
         submissionScript+='.sh'
         file = open(submissionScript, 'w')
         file.write('echo ...executing '+ subjobstr + '\n')
         file.write(subjobstr)
         file.close()
         os.system('chmod a+x '+submissionScript)

         ## do the job submission            
         ##if self.__jobstarted:
         ##   thread = threading.Thread(target=self.__waitingForEnd, args=(self.__type,))
         ##   thread.start()
         ##   self.__jobstarted = False
            
         ## --------------------------------------------------------------------------
         ## uncomment the following line(s) to run in interactive mode'
         ## os.system('./'+submissionScript+'>>'+submissionLog+'.log')                     ## interactive
         ## os.system('./'+submissionScript+'>>'+submissionLog+'.log'+ '< /dev/null&')     ## in batch on work group server
            
         ## --------------------------------------------------------------------------
         ## uncomment the following line(s) to run in batch mode; qsub parameters are
         ## explained above. For more details see:
         ## http://naf.desy.de/general_naf_docu/working_with_the_local_batch_system/

         ## determine farm queue
         queue=' -l h_cpu='
         if   (self.__farmQueue=='xshort'):
            queue+='00:14:59'
         elif (self.__farmQueue=='short' ):
            queue+='00:59:59'
         elif (self.__farmQueue=='medium'):
            queue+='11:59:59'
         else:
            queue+='48:00:00'

         ## prepare farm word
         farm = 'qsub'
         farm+= ' -l h_vmem=2G'                 ## increase memory to 2G
         farm+= queue                           ## set maximally allowed cpu time
        #farm+= ' -l tmp_free=10G'              ## set maximally allowed space for output
         farm+= ' -cwd'                         ## execute job from current directory
         farm+= ' -V'                           ## inherit the current shell environment to the job
         farm+= ' -o '+submissionLog+'.farmout' ## farm output file
         farm+= ' -e '+submissionLog+'.farmerr' ## farm error file
         farm+= ' -m ae'                        ## send mail on end/abort
         farm+= ' '
         #use with from python2.6.1 on
         #subprocess.check_call(farm+'./'+submissionScript+'>>'+submissionLog+'.farmlog', shell=True)
         os.system(farm+'./'+submissionScript+'>>'+submissionLog+'.farmlog')
         #os.spawnl(farm+'./'+submissionScript+'>>'+submissionLog+'.farmlog')         
         Timer.sleep(1)
      ## give submission summary and some final words
      print '\n'
      os.system('qstat -u `whoami`')
      print '-----------------------------------------------------------------------------'
      print ' you can check the status of your jobs with: \'qstat -u $USER\' '
      print ' you can kill specific jobs with           : \'qdel  jobid\' '      
      print ' you can combine root-files later on with  : \'hadd output.root input_?.root'
      print ' in case of problems mail to               : naf-cms-support(at)desy(dot)de'
      print '-----------------------------------------------------------------------------'
      print '\n'
      
##-----------------------------------------------------------------------------------
if __name__ == '__main__':
    splitter = jobSplitter()
    splitter.beginJob()
    splitter.main()
    splitter.endJob()

