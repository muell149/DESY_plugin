#! /usr/bin/env python

## system imports
import os
import sys
import glob
import getopt

##-----------------------------------------------------------------------------------
## 
## 
class blockMaker:
    ##
    ## configurables
    ##

    ## verbose mode
    __verbose   = False
    ## path to the input files
    __input     = ''
    ## sample name
    __sample    = ''
    ## name of output file
    __output    = ''
    ## number of files per block
    __blockSize = 10

    ##
    ## internal variables
    ##

    ## version
    __version   = 'V00-01-00'
    ## name of the object
    __name      = 'none'
    ## common filename replacement
    __commonReplacement = '/pnfs/desy.de/cms/tier2/'

##-----------------------------------------------------------------------------------    
##  Constructor
    def __init__(self):
        self.__name  = 'blockMaker'

##-----------------------------------------------------------------------------------        
##  * start sequence
    def beginJob(self):
        versionLine = "*                                      "
        versionLine+= self.__version + " *"              
        print "**************************************************"
        print "* starting file block creation...                *"
        print "*                                                *"
        print versionLine
        print "**************************************************"
 
##-----------------------------------------------------------------------------------        
##  * end sequence
##  * this may contain the execution of histPlotter or something similar                
    def endJob(self):
        print "**************************************************"
        print "* leaving file block creation...                 *"
        print "*                                                *"
        print "*                                      Good Bye! *"
        print "**************************************************"          
        
##-----------------------------------------------------------------------------------
##  * parse command line options
##  * do basic check whether the options make sense or not
##  * depending on the options execute ...
    def main(self):
        try:
            opts, args = getopt.getopt(sys.argv[1:],
                                       'hvp:i:o:s:',
                                       ['help','verbose','proc=','input=','out=','size=']
                                       )
        except getopt.error, msg:
            print msg
            print "for help use --help"
            sys.exit(2)

        for o, a in opts:
            ################################################
            ## get help
            ################################################                
            if o in ("-h", "--help"):
                self.__helpMsg()
                self.endJob()
                sys.exit(0)
            ################################################
            ## run verbose mode
            ################################################
            elif o in ("-v", "--verbose"):
                self.__verbose = True
            ################################################                
            ## name of global sample tag
            ################################################                
            elif o in ("-p", "--proc"):
                self.__sample = a
            ################################################                
            ## path to input files
            ################################################                
            elif o in ("-i", "--input"):
                self.__input = a
            ################################################                
            ## path and name of output file
            ################################################
            elif o in ("-o", "--out"):
                if (not (a == '')):
                    self.__output = a
            ################################################                
            ## number of files per block
            ################################################
            elif o in ("-s", "--size"):
                if (not (a == '')):
                    self.__blockSize = int(a)
            else:
                self.__errorMsg()
                print '* * argument(s) not recognized. See --help for usage'
                print "**************************************************"
        ## perform basic checks of the input
        ## self.__checkOptions()
        ## run and perform basic monitoring
        self.__createFileBlock()

##-----------------------------------------------------------------------------------
##  * print help message for the use of the ConfigRunner
    def __helpMsg(self):
        print "\n"
        print " Synopsis   : blockMaker [Option] -input '...' -p PROC -o OUTPUT           \n"
        print " Description: script to create file blocks as input to the configRunner via  "
        print "              command line options; input files are read from --input (all   "
        print "              linux wildcarts are allowed) and directed to -o; the process   "
        print "              label is given by -p; the default block size is 10 files, but  "
        print "              may be specified by the -n option. Block sizes in events are   "
        print "              set to large numbers; the script also provides a shell script  "
        print "              to determine the exact block size in events; it is recommended "
        print "              to run this script and the blockSizes script to finalize the   "
        print "              block creation process.                                      \n"        
        print " Options    : -h | --help         [ ]   print this message                   "
        print "              -v | --verbose      [ ]   run in verbose mode                  "
        print "              -i | --input ...    [x]   path to the input files              "
        print "              -p | --proc  ...    [x]   specify process name                 "
        print "              -o | --out   ...    [x]   specify output file name and path    "
        print "              -n | --size  ...    [ ]   change block size (default is 10)    "
        print " [ ] optional                                                                "
        print " [x] mandatory                                                               "
        print "\n"

##-----------------------------------------------------------------------------------            
##  * writes a string to a file (overwriting existing files)
    def __createFileBlock(self):
        ## create head of file
        self.__writeToFile('from TopAnalysis.Configuration.defines import sizes \n', 'w')
        self.__writeToFile('from TopAnalysis.Configuration.defines import source\n')
        self.__writeToFile('\n')        
        self.__writeToFile('######################################################################\n')
        self.__writeToFile('#                                                                     \n')
        self.__writeToFile('# -----------                                                         \n')
        self.__writeToFile('#                                                                     \n')
        self.__writeToFile('#                                                                     \n')        
        self.__writeToFile('# Events      :                                                       \n')
        self.__writeToFile('# xsec(pb)  LO:                                                       \n')
        self.__writeToFile('# xsec(pb) NLO:                                                       \n')
        self.__writeToFile('# eff         :                                                       \n')
        self.__writeToFile('######################################################################\n')           
        ## get sorted list of input files
        pathName=self.__input+'*.root'
        inputFiles=glob.glob(pathName)
        inputFiles.sort()
        numberOfFiles=len(inputFiles)
        numberOfBlocks=numberOfFiles-(numberOfFiles%self.__blockSize)+1
        
        iBlock=-1
        blockVector=[]
        for i in range(len(inputFiles)):
            ## write sizes to the top of each block
            if (i%self.__blockSize==0):
                iBlock=iBlock+1
                ## create blockString
                blockString =self.__sample
                blockString+='_'
                blockString+=iBlock.__str__()
                blockVector.append(blockString)
                ## create sizeString
                sizesString ='sizes [\''
                sizesString+=blockString
                sizesString+='\'] = 99999999'
                sizesString+='\n'
                self.__writeToFile(sizesString)
            ## create source string
            bufferString =inputFiles[i].replace(self.__commonReplacement, '/')
            sourceString ='source[\''
            sourceString+=blockString
            if (i%self.__blockSize==0):
                sourceString+='\'] =\'\\\''
            else:
                sourceString+='\']+=\'\\\''
            sourceString+=bufferString ##inputFiles[i]
            if (i%self.__blockSize==self.__blockSize-1 or i==len(inputFiles)-1):
                sourceString+='\\\'\''
                sourceString+='\n'
            else:
                sourceString+='\\\',\''
            sourceString+='\n'
            self.__writeToFile(sourceString)

        ## create submit script to determine block sizes in events
        submissionScript = open(self.__output+'.sh', 'w')
        for i in range(len(blockVector)):
            ## create submissionString
            submissionString = 'submit --cmd \'configRunner --cfg \'TopAnalysis/TopUtils/test/addEventWeightPlain_cfg.py\' -p '
            submissionString+= blockVector[i]
            submissionString+= ' -e 9999999 -o None\' -n 1 --name '
            submissionString+= blockVector[i]
            submissionString+= ' -q short'
            submissionString+= '\n'                        
            ## create submissionScript
            submissionScript.write(submissionString)
        submissionScript.close()
        os.system('chmod a+x '+self.__output+'.sh')

##-----------------------------------------------------------------------------------            
##  * writes a string to a file (overwriting existing files)
    def __writeToFile(self, str, option='a'):
        name = self.__output+'.py'
        file = open(name, option)
        file.write(str)
        file.close()

##-----------------------------------------------------------------------------------
if __name__ == '__main__':
    runner = blockMaker()
    runner.beginJob()
    runner.main()
    runner.endJob()
