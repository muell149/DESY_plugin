#! /usr/bin/env python
import pyexpat 
from TopAnalysis.TopUtils.tools.Plotter import Plotter
import TopAnalysis.TopUtils.tools.Plotter
from TopAnalysis.TopUtils.tools.Drawer import Drawer
import os
import sys
import getopt
import TopAnalysis.TopUtils.tools.XMLConfigParser
TopAnalysis.TopUtils.tools.XMLConfigParser.pathToDir = ""
TopAnalysis.TopUtils.tools.Plotter.showPerformance = False

class histPlotter:
    """
  Python script to steer the plotting package
        """
    def __init__(self):
        self.__files = []
        self.__cfg = ""
    
    def __helpMsg(self):
        print "\n"
        print " Synopsis   : histPlotter configfile [file1.root, file2.root, ...]"
        print " Description: script to draw histograms from a root file  "
        print "              with customization in a configuration file"
        print "\n"
    ##-----------------------------------------------------------------------------------
##  * Parse command line options
##  * Do basic check whether the options make sense or not
    def main(self):
        try:
            opts, args = getopt.getopt(sys.argv[1:], "hp", ["help", "perf"])
        except getopt.error, msg:
            print msg
            print "for help use --help"
            sys.exit(2)

        for o, a in opts:
            if o in ("-h", "--help"):
                self.__helpMsg()
                sys.exit(0)
            elif o in ("-p", "--perf"):
                TopAnalysis.TopUtils.tools.Plotter.showPerformance = True
        #first argument has to be the XML configuration file
        if args and args[0] and args[0].endswith(".xml"):
            self.__cfg = args[0]
        else:
            sys.exit("First argument has to be a valid XML configuration file. Exiting script")
        #any other argument will be interpreted as an input (root file)
        if len(args) > 1:
            for i in range(1, len(args)):
                file = args[i]
                if file.endswith(".root"):
                    self.__files.append(file)
                else:
                    sys.exit("2nd and following arguments have to be root files. Exiting script")
        
        Drawer.setDefaultLayout()#set default layout options and ROOT variables
        if self.__files:#more than one argument
            self.__prepareTemplate()#put the input files into the configuration file
        p = Plotter(self.__cfg)#create new instance of Plotter
        p.savePlots("plots")#write the plots
        if Drawer.summaryFile:#if summary file was defined
            print "Summary file '%s' has been created" % Drawer.summaryFile
        print "Thank you and Goodbye"#byebye
            
    def __prepareTemplate(self):
        tmp = self.__cfg
        for file in self.__files:
            pass
            #user Parser to create node
            #<file id="f%d" name = "%s" />
            #create tmp config
        self.__cfg = tmp

if __name__ == '__main__':
    h = histPlotter()
    h.main()